"""
Validation utilities for InstructPix2Pix training.
Contains functions for calculating validation scores and creating visualizations.
"""

import cv2
import numpy as np
import PIL
from .image_processing import extract_color_pixels, extract_region_centers, match_points


def calculate_validation_score(predicted_img, ground_truth_img):
    """
    Calculate the validation score for both green (switches) and purple (routing points) pixels
    in the predicted image compared to the ground truth image using nearest neighbor matching with L1 distance.

    Parameters:
    - predicted_img: The image generated by the model.
    - ground_truth_img: The ground truth image.

    Returns:
    - Dictionary containing:
        - matching_score_green: Ratio of predicted to expected green switches
        - average_valid_score_green: Average L1 distance for matched green switches
        - matching_score_purple: Ratio of predicted to expected purple points
        - average_valid_score_purple: Average L1 distance for matched purple points
        - visualization_img: Image with matched switches/points in green/purple, unmatched in red
    """
    # Convert PIL Images to numpy arrays in BGR format for OpenCV
    predicted_np = cv2.cvtColor(np.array(predicted_img), cv2.COLOR_RGB2BGR)
    ground_truth_np = cv2.cvtColor(np.array(ground_truth_img), cv2.COLOR_RGB2BGR)

    # Green (switches)
    green_mask_prediction = extract_color_pixels(predicted_np)
    green_mask_ground_truth = extract_color_pixels(ground_truth_np)
    positions_predictions_green = extract_region_centers(green_mask_prediction)
    positions_ground_truth_green = extract_region_centers(green_mask_ground_truth)

    # Purple (routing points)
    purple_mask_prediction = extract_color_pixels(predicted_np, lower_hue=130, upper_hue=150)
    purple_mask_ground_truth = extract_color_pixels(ground_truth_np, lower_hue=130, upper_hue=150)
    positions_predictions_purple = extract_region_centers(purple_mask_prediction)
    positions_ground_truth_purple = extract_region_centers(purple_mask_ground_truth)

    # Match green points
    matched_green, unmatched_green, avg_score_green, matching_score_green = match_points(
        positions_predictions_green, positions_ground_truth_green
    )
    # Match purple points
    matched_purple, unmatched_purple, avg_score_purple, matching_score_purple = match_points(
        positions_predictions_purple, positions_ground_truth_purple
    )

    # Color definitions for visualization
    purple_color = (255, 0, 153)
    green_color = (0, 255, 0)
    yellow_color = (0, 255, 255)
    red_color = (0, 0, 255)

    # Create visualization
    visualization_img = np.array(predicted_img).copy()
    visualization_img_bgr = np.full(visualization_img.shape, 255, dtype=np.uint8)
    visualization_img_bgr = cv2.cvtColor(visualization_img_bgr, cv2.COLOR_RGB2BGR)
    
    # Draw matched green switches in green
    radius = 1
    for pos in matched_green:
        cv2.circle(visualization_img_bgr, pos, radius=radius, color=green_color, thickness=-1)
    # Draw unmatched green switches in red
    for pos in unmatched_green:
        cv2.circle(visualization_img_bgr, pos, radius=radius, color=red_color, thickness=-1)
    # Draw matched purple points in purple
    for pos in matched_purple:
        cv2.circle(visualization_img_bgr, pos, radius=radius, color=purple_color, thickness=-1)
    # Draw unmatched purple points in yellow
    for pos in unmatched_purple:
        cv2.circle(visualization_img_bgr, pos, radius=radius, color=yellow_color, thickness=-1)
    
    # Convert back to RGB for PIL
    visualization_img_rgb = cv2.cvtColor(visualization_img_bgr, cv2.COLOR_BGR2RGB)
    visualization_pil = PIL.Image.fromarray(visualization_img_rgb)

    return {
        "matching_score_green": matching_score_green,
        "average_valid_score_green": avg_score_green,
        "matching_score_purple": matching_score_purple,
        "average_valid_score_purple": avg_score_purple,
        "visualization_img": visualization_pil
    }
